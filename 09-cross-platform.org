#+TITLE: Cross-Platform Filesystem IPC
#+AUTHOR: AYGP-DR
#+DATE: 2025-06-28
#+OPTIONS: toc:2 num:t

* Beyond Unix: Windows, Plan 9, and Other Systems

** Overview

This chapter explores how filesystem-based IPC concepts translate across different operating systems, examining both the common patterns and unique platform-specific features.

** Windows: A Different Philosophy

*** Named Pipes in Windows

#+begin_src python :tangle cross_platform/windows_pipes.py :mkdirp yes :comments link
"""
Windows named pipes - similar name, different implementation.
"""

import os
import sys
from typing import Optional

class WindowsNamedPipes:
    """Windows named pipe patterns"""
    
    @staticmethod
    def pipe_comparison():
        """Compare Windows vs Unix named pipes"""
        
        comparison = """
        | Feature | Windows | Unix |
        |---------|---------|------|
        | Namespace | \\\\\.\\pipe\\name | /path/to/fifo |
        | Network capable | Yes (\\\\server\\pipe\\) | No |
        | Bidirectional | Yes | No (need two) |
        | Message mode | Yes | No (byte stream) |
        | Multiple instances | Yes | No |
        | Security | ACLs | File permissions |
        | Creation | CreateNamedPipe() | mkfifo() |
        | Persistence | Process lifetime | Filesystem entry |
        """
        
        print("=== Windows vs Unix Named Pipes ===")
        print(comparison)
    
    @staticmethod
    def windows_pipe_example():
        """Example of Windows named pipe usage (conceptual)"""
        
        # Note: This is conceptual - would need pywin32 for actual implementation
        pipe_code = '''
        # Windows named pipe server (conceptual)
        import win32pipe
        import win32file
        
        pipe_name = r'\\\\.\\pipe\\MyAppPipe'
        
        # Create named pipe
        pipe = win32pipe.CreateNamedPipe(
            pipe_name,
            win32pipe.PIPE_ACCESS_DUPLEX,  # Bidirectional
            win32pipe.PIPE_TYPE_MESSAGE |   # Message mode
            win32pipe.PIPE_WAIT,
            1,      # Max instances
            65536,  # Out buffer size
            65536,  # In buffer size
            0,      # Default timeout
            None    # Security attributes
        )
        
        # Wait for client
        win32pipe.ConnectNamedPipe(pipe, None)
        
        # Read/write messages
        _, data = win32file.ReadFile(pipe, 4096)
        win32file.WriteFile(pipe, b"Response")
        '''
        
        print("\n=== Windows Named Pipe Pattern ===")
        print(pipe_code)
    
    @staticmethod
    def windows_ipc_alternatives():
        """Other Windows IPC mechanisms"""
        
        mechanisms = {
            "Mailslots": {
                "path": "\\\\*\\mailslot\\path\\name",
                "features": "Broadcast, unreliable, simple",
                "use_case": "Discovery, notifications"
            },
            "Memory Mapped Files": {
                "path": "Local\\MyFileMappingObject",
                "features": "Shared memory with named objects",
                "use_case": "High-performance data sharing"
            },
            "WM_COPYDATA": {
                "path": "N/A (Window messages)",
                "features": "Send data between windows",
                "use_case": "GUI application IPC"
            },
            "COM/DCOM": {
                "path": "CLSID in registry",
                "features": "Object-oriented RPC",
                "use_case": "Component integration"
            }
        }
        
        print("\n=== Windows IPC Alternatives ===")
        for name, details in mechanisms.items():
            print(f"\n{name}:")
            for key, value in details.items():
                print(f"  {key}: {value}")

class WindowsFilesystemIPC:
    """Using regular files for IPC on Windows"""
    
    @staticmethod
    def windows_file_locking():
        """Windows file locking mechanisms"""
        
        locking_info = """
        Windows File Locking for IPC:
        
        1. Mandatory Locking (default):
           - Files locked when opened
           - Other processes get sharing violations
           - Different from Unix advisory locks
        
        2. LockFile/LockFileEx:
           - Byte-range locking
           - Can be exclusive or shared
           - Works across network
        
        3. Opportunistic Locks (OpLocks):
           - Client-side caching mechanism
           - Broken when others access file
           - Important for SMB performance
        """
        
        print(locking_info)
    
    @staticmethod
    def windows_atomic_operations():
        """Atomic operations on Windows"""
        
        atomic_ops = """
        Windows Atomic File Operations:
        
        1. MoveFileEx with MOVEFILE_REPLACE_EXISTING:
           - Similar to Unix rename()
           - Atomic on same volume
           - Can delay until reboot
        
        2. ReplaceFile:
           - Atomic replacement with backup
           - Preserves attributes/ACLs
           - Better than MoveFileEx for configs
        
        3. Transactional NTFS (deprecated):
           - Was: Full ACID file operations
           - Now: Don't use, being removed
        
        4. FILE_FLAG_WRITE_THROUGH:
           - Bypass write cache
           - Similar to O_SYNC
        """
        
        print(atomic_ops)
#+end_src

*** Windows-Specific Patterns

#+begin_src python :tangle cross_platform/windows_patterns.py :mkdirp yes :comments link
"""
IPC patterns specific to Windows environments.
"""

import os
from pathlib import Path

class WindowsIPCPatterns:
    """Windows-specific IPC patterns"""
    
    @staticmethod
    def mutex_pattern():
        """Windows named mutex for IPC coordination"""
        
        pattern = '''
        # Windows Named Mutex Pattern
        import win32event
        import win32api
        import winerror
        
        def single_instance_check():
            """Ensure only one instance runs"""
            
            mutex_name = "Global\\\\MyAppMutex"
            
            try:
                # Create named mutex
                mutex = win32event.CreateMutex(None, True, mutex_name)
                
                # Check if already exists
                if win32api.GetLastError() == winerror.ERROR_ALREADY_EXISTS:
                    print("Another instance is running")
                    return False
                
                return True
                
            except Exception as e:
                print(f"Mutex error: {e}")
                return False
        '''
        
        print("=== Windows Mutex Pattern ===")
        print(pattern)
    
    @staticmethod
    def file_watcher_pattern():
        """Windows file watching for IPC"""
        
        pattern = '''
        # Windows File Change Notification
        import win32file
        import win32con
        
        def watch_directory(path):
            """Watch directory for IPC file changes"""
            
            handle = win32file.FindFirstChangeNotification(
                path,
                False,  # Don't watch subdirectories
                win32con.FILE_NOTIFY_CHANGE_FILE_NAME |
                win32con.FILE_NOTIFY_CHANGE_LAST_WRITE
            )
            
            try:
                while True:
                    result = win32event.WaitForSingleObject(handle, 500)
                    
                    if result == win32con.WAIT_OBJECT_0:
                        # Changes detected
                        process_ipc_files(path)
                        
                        # Reset notification
                        win32file.FindNextChangeNotification(handle)
                        
            finally:
                win32file.FindCloseChangeNotification(handle)
        '''
        
        print("\n=== Windows File Watcher Pattern ===")
        print(pattern)
    
    @staticmethod
    def share_permissions():
        """Windows share permissions for IPC"""
        
        info = """
        Windows Share Permissions for IPC:
        
        1. Local Shares:
           - C:\\ProgramData - All users writable
           - %TEMP% - User-specific temporary
           - %LOCALAPPDATA% - User-specific persistent
        
        2. Network Shares:
           - \\\\server\\share$ - Administrative shares
           - SMB for cross-machine IPC
           - Careful with credentials
        
        3. Security Best Practices:
           - Use specific DACLs not Everyone
           - Avoid %TEMP% for sensitive data
           - Consider encrypted folders
        """
        
        print(info)

class CrossPlatformAbstraction:
    """Abstracting IPC across Windows and Unix"""
    
    @staticmethod
    def portable_temp_dir() -> Path:
        """Get platform-appropriate temp directory"""
        
        if sys.platform == "win32":
            # Windows: Use user's temp
            import tempfile
            return Path(tempfile.gettempdir())
        else:
            # Unix: Prefer /run if available
            if Path("/run/user").exists():
                uid = os.getuid()
                user_run = Path(f"/run/user/{uid}")
                if user_run.exists():
                    return user_run
            
            return Path("/tmp")
    
    @staticmethod
    def portable_lock_file(name: str) -> Path:
        """Get platform-appropriate lock file location"""
        
        if sys.platform == "win32":
            # Windows: Use ProgramData
            return Path(os.environ.get('PROGRAMDATA', 'C:\\ProgramData')) / name
        else:
            # Unix: Use /var/lock or /tmp
            if Path("/var/lock").exists():
                return Path("/var/lock") / name
            return Path("/tmp") / name
    
    @staticmethod
    def portable_atomic_write(path: Path, data: bytes):
        """Atomic write across platforms"""
        
        import tempfile
        
        # Create temp file in same directory
        fd, temp_path = tempfile.mkstemp(
            dir=path.parent,
            prefix='.tmp-',
            suffix=path.suffix
        )
        
        try:
            # Write data
            os.write(fd, data)
            
            if sys.platform == "win32":
                # Windows: Close before rename
                os.close(fd)
                fd = None
                
                # Use Windows API for atomic replace
                import ctypes
                kernel32 = ctypes.windll.kernel32
                MOVEFILE_REPLACE_EXISTING = 0x1
                
                if not kernel32.MoveFileExW(temp_path, str(path), 
                                          MOVEFILE_REPLACE_EXISTING):
                    raise OSError("Atomic rename failed")
            else:
                # Unix: fsync then rename
                os.fsync(fd)
                os.close(fd)
                fd = None
                os.rename(temp_path, path)
                
        finally:
            if fd is not None:
                os.close(fd)
            try:
                os.unlink(temp_path)
            except:
                pass
#+end_src

** Plan 9: The Purist Approach

*** Everything Really Is a File

#+begin_src python :tangle cross_platform/plan9_ipc.py :mkdirp yes :comments link
"""
Plan 9's approach to IPC - everything through 9P.
"""

class Plan9IPC:
    """Plan 9's unique approach to IPC"""
    
    @staticmethod
    def ninep_protocol():
        """The 9P protocol that makes it all work"""
        
        protocol_info = """
        9P Protocol Overview:
        
        Messages:
        - Tversion/Rversion - Protocol negotiation
        - Tattach/Rattach - Connect to filesystem
        - Twalk/Rwalk - Navigate namespace
        - Topen/Ropen - Open file
        - Tread/Rread - Read data
        - Twrite/Rwrite - Write data
        - Tclunk/Rclunk - Close file
        
        Everything is a 9P server:
        - Processes expose services as filesystems
        - Network connections appear as files
        - Graphics is a filesystem (/dev/draw)
        - Even the window system (rio)
        """
        
        print("=== Plan 9: 9P Protocol ===")
        print(protocol_info)
    
    @staticmethod
    def plan9_examples():
        """Real Plan 9 IPC examples"""
        
        examples = """
        Plan 9 IPC Examples:
        
        1. CPU Command (remote execution):
           cpu -h fileserver
           # Mounts remote namespace locally
           # Processes run remotely but appear local
        
        2. Import Command (resource sharing):
           import -a tcp!server!564 /n/remote
           # Import remote namespace
           # Access remote files as local
        
        3. Plumber (inter-application communication):
           echo 'file.c:42' | plumb -d edit
           # Sends message to editor
           # Editor opens file at line 42
        
        4. Namespace Manipulation:
           bind /n/sources/plan9 /usr/glenda/src
           # Bind remote directory locally
           # Transparent network access
        """
        
        print("\n=== Plan 9 IPC Examples ===")
        print(examples)
    
    @staticmethod
    def plan9_innovations():
        """Innovations that didn't make it to mainstream"""
        
        innovations = {
            "Per-process Namespaces": [
                "Each process has its own view of filesystem",
                "Can mount services anywhere",
                "True capability-based security"
            ],
            "Union Directories": [
                "Multiple directories appear as one",
                "Transparent layering",
                "No need for PATH variables"
            ],
            "Private Namespaces": [
                "RFNOMNT - no external mounts",
                "Perfect sandboxing",
                "Decades before containers"
            ],
            "File Servers as IPC": [
                "Services export 9P interface",
                "Language agnostic",
                "Network transparent"
            ]
        }
        
        print("\n=== Plan 9 Innovations ===")
        for innovation, features in innovations.items():
            print(f"\n{innovation}:")
            for feature in features:
                print(f"  - {feature}")

class Plan9Influence:
    """Plan 9's influence on modern systems"""
    
    @staticmethod
    def modern_adoptions():
        """Where Plan 9 ideas live on"""
        
        adoptions = """
        Plan 9 Ideas in Modern Systems:
        
        1. Linux:
           - 9P filesystem (v9fs)
           - Per-process namespaces
           - /proc filesystem
           - bind mounts
        
        2. Go Language:
           - Designed by Plan 9 alumni
           - Channels inspired by pipes
           - UTF-8 from Plan 9
        
        3. Docker/Containers:
           - Namespace isolation
           - Union filesystems
           - Bind mounts for volumes
        
        4. WSL (Windows Subsystem for Linux):
           - Uses 9P for filesystem sharing
           - Maps Windows drives via 9P
        
        5. FUSE:
           - User-space filesystems
           - Similar to Plan 9 file servers
        """
        
        print(adoptions)
#+end_src

** macOS: BSD Heritage with Modern Twists

*** macOS-Specific IPC

#+begin_src python :tangle cross_platform/macos_ipc.py :mkdirp yes :comments link
"""
macOS filesystem IPC - BSD base with Apple additions.
"""

import os
import sys
from pathlib import Path

class MacOSIPC:
    """macOS-specific IPC mechanisms"""
    
    @staticmethod
    def macos_overview():
        """Overview of macOS IPC landscape"""
        
        overview = """
        macOS IPC Mechanisms:
        
        BSD Heritage:
        - Unix domain sockets (same as BSD)
        - Named pipes (FIFOs)
        - POSIX shared memory
        - kqueue for event notification
        
        Apple Additions:
        - FSEvents API (file system events)
        - Distributed Notifications
        - XPC (cross-process communication)
        - Mach ports (low-level)
        - Launch Services
        """
        
        print("=== macOS IPC Overview ===")
        print(overview)
    
    @staticmethod
    def fsevents_pattern():
        """FSEvents for filesystem monitoring"""
        
        pattern = '''
        # FSEvents API Usage (conceptual Python)
        import fsevents
        
        def file_changed(event):
            """Handle filesystem change event"""
            print(f"Change in: {event.name}")
            
            # Check if it's our IPC file
            if event.name.endswith('.ipc'):
                process_ipc_message(event.name)
        
        # Create event stream
        stream = fsevents.Stream(
            file_changed,
            '/path/to/watch',
            file_events=True
        )
        
        # Start monitoring
        observer = fsevents.Observer()
        observer.schedule(stream)
        observer.start()
        '''
        
        print("\n=== macOS FSEvents Pattern ===")
        print(pattern)
    
    @staticmethod
    def xpc_alternative():
        """XPC as modern IPC alternative"""
        
        xpc_info = """
        XPC - Apple's Modern IPC:
        
        Advantages over filesystem IPC:
        - Type-safe message passing
        - Automatic process lifecycle
        - Privilege separation built-in
        - Sandboxing aware
        
        When to still use filesystem IPC:
        - Cross-platform compatibility needed
        - Simple configuration files
        - Log files and debugging
        - Legacy system integration
        """
        
        print("\n=== XPC vs Filesystem IPC ===")
        print(xpc_info)

class MacOSFilesystemQuirks:
    """macOS filesystem quirks affecting IPC"""
    
    @staticmethod
    def case_sensitivity():
        """Dealing with case-insensitive filesystem"""
        
        info = """
        macOS Case Sensitivity Issues:
        
        Default HFS+/APFS is case-preserving but case-insensitive:
        
        Problems for IPC:
        - "Message.txt" and "message.txt" are same file
        - Can break Unix software expectations
        - Race conditions with case variations
        
        Solutions:
        - Always use lowercase for IPC files
        - Use UUIDs instead of names
        - Check filesystem with pathconf()
        """
        
        print(info)
    
    @staticmethod
    def extended_attributes():
        """macOS extended attributes for IPC"""
        
        xattr_info = """
        macOS Extended Attributes:
        
        Unique xattrs:
        - com.apple.quarantine - Gatekeeper info
        - com.apple.metadata - Spotlight metadata
        - com.apple.FinderInfo - Finder metadata
        
        IPC Usage:
        - Store metadata without changing file
        - Small data passing (up to 128KB)
        - Survives file copies (usually)
        
        Example:
        xattr -w com.myapp.message "data" file.txt
        xattr -p com.myapp.message file.txt
        """
        
        print(xattr_info)
    
    @staticmethod
    def sandbox_considerations():
        """App Sandbox effects on filesystem IPC"""
        
        sandbox_info = """
        macOS App Sandbox and IPC:
        
        Restrictions:
        - Apps can't access arbitrary paths
        - Temp directory is containerized
        - Named pipes may not work
        
        Allowed IPC methods:
        - XPC services (preferred)
        - App group containers
        - User-selected files (powerbox)
        - Specific entitlements
        
        App Group Containers:
        ~/Library/Group Containers/group.id/
        - Shared between apps with same group
        - Survives app deletion
        - Good for settings/data sharing
        """
        
        print(sandbox_info)
#+end_src

** Other Systems

*** Embedded and RTOS

#+begin_src python :tangle cross_platform/embedded_ipc.py :mkdirp yes :comments link
"""
IPC in embedded and real-time systems.
"""

class EmbeddedIPC:
    """IPC patterns in embedded systems"""
    
    @staticmethod
    def embedded_constraints():
        """Constraints affecting embedded IPC"""
        
        constraints = """
        Embedded System IPC Constraints:
        
        1. No filesystem:
           - Many embedded systems have no FS
           - Use memory-based alternatives
           - Static allocation common
        
        2. Limited resources:
           - KB not GB of RAM
           - No virtual memory
           - Every byte counts
        
        3. Real-time requirements:
           - Predictable timing
           - No blocking operations
           - Priority inheritance
        
        4. Reliability:
           - No dynamic allocation
           - Watchdog supervision
           - Fail-safe behavior
        """
        
        print("=== Embedded IPC Constraints ===")
        print(constraints)
    
    @staticmethod
    def embedded_patterns():
        """Common embedded IPC patterns"""
        
        patterns = {
            "Message Queues": {
                "implementation": "Ring buffers in RAM",
                "features": "Fixed size, lock-free",
                "example": "FreeRTOS queues"
            },
            "Shared Memory": {
                "implementation": "Static buffers",
                "features": "Zero copy, careful sync",
                "example": "DMA buffers"
            },
            "Mailboxes": {
                "implementation": "Hardware registers",
                "features": "Interrupt driven",
                "example": "ARM Cortex-M IPC"
            },
            "Event Flags": {
                "implementation": "Bit fields",
                "features": "Multiple waiters",
                "example": "RTOS event groups"
            }
        }
        
        print("\n=== Embedded IPC Patterns ===")
        for pattern, details in patterns.items():
            print(f"\n{pattern}:")
            for key, value in details.items():
                print(f"  {key}: {value}")

class MobileIPC:
    """IPC on mobile platforms"""
    
    @staticmethod
    def android_ipc():
        """Android IPC mechanisms"""
        
        android_info = """
        Android IPC:
        
        1. Binder:
           - Primary Android IPC
           - Not filesystem based
           - Kernel driver
        
        2. Filesystem IPC:
           - App-private directories
           - Shared storage (deprecated)
           - Content providers abstract FS
        
        3. Unix domain sockets:
           - Used by native services
           - Zygote communication
           - App-to-native bridge
        """
        
        print(android_info)
    
    @staticmethod
    def ios_ipc():
        """iOS IPC mechanisms"""
        
        ios_info = """
        iOS IPC:
        
        1. App Groups:
           - Shared containers
           - Like macOS groups
           - Filesystem based
        
        2. Darwin Notifications:
           - System-wide events
           - No data passing
           - Names not paths
        
        3. Mach ports:
           - Low-level IPC
           - XPC built on top
           - Not filesystem
        """
        
        print(ios_info)
#+end_src

** Cross-Platform Libraries and Abstractions

*** Portable IPC Libraries

#+begin_src python :tangle cross_platform/portable_libraries.py :mkdirp yes :comments link
"""
Libraries that abstract filesystem IPC across platforms.
"""

class PortableIPCLibraries:
    """Overview of cross-platform IPC libraries"""
    
    @staticmethod
    def library_comparison():
        """Compare portable IPC libraries"""
        
        libraries = {
            "Boost.Interprocess": {
                "languages": "C++",
                "platforms": "Windows, Unix, macOS",
                "features": "Shared memory, queues, mutex",
                "filesystem": "Yes - file locks, mmap"
            },
            "ZeroMQ": {
                "languages": "Many bindings",
                "platforms": "All major",
                "features": "Message patterns, sockets",
                "filesystem": "Unix sockets, not files"
            },
            "Apache Thrift": {
                "languages": "Many",
                "platforms": "All major",
                "features": "RPC, serialization",
                "filesystem": "Can use files for transport"
            },
            "gRPC": {
                "languages": "Many",
                "platforms": "All major",
                "features": "HTTP/2 based RPC",
                "filesystem": "Unix sockets supported"
            },
            "nanomsg": {
                "languages": "C, bindings",
                "platforms": "POSIX, Windows",
                "features": "Scalability protocols",
                "filesystem": "IPC transport option"
            }
        }
        
        print("=== Portable IPC Libraries ===")
        for lib, details in libraries.items():
            print(f"\n{lib}:")
            for key, value in details.items():
                print(f"  {key}: {value}")
    
    @staticmethod
    def abstraction_patterns():
        """Common abstraction patterns"""
        
        patterns = """
        Cross-Platform Abstraction Patterns:
        
        1. Transport Abstraction:
           abstract class Transport {
               virtual send(data)
               virtual receive() -> data
           }
           - FileTransport (files)
           - PipeTransport (named pipes)
           - SocketTransport (unix/tcp)
        
        2. Platform Factory:
           def create_ipc():
               if Windows:
                   return WindowsNamedPipe()
               elif Unix:
                   return UnixSocket()
        
        3. Capability Detection:
           features = detect_platform_features()
           if features.has_unix_sockets:
               use_unix_sockets()
           elif features.has_named_pipes:
               use_named_pipes()
           else:
               fallback_to_files()
        
        4. Polyfill Pattern:
           if not hasattr(os, 'mkfifo'):
               os.mkfifo = windows_mkfifo_emulation
        """
        
        print("\n" + patterns)

class PracticalPortability:
    """Practical tips for portable filesystem IPC"""
    
    @staticmethod
    def portability_guidelines():
        """Guidelines for portable code"""
        
        guidelines = """
        Portability Guidelines:
        
        1. Path Handling:
           - Use pathlib or os.path
           - Never hardcode separators
           - Handle case sensitivity
        
        2. Atomic Operations:
           - Test rename atomicity
           - Have fallback strategies
           - Document assumptions
        
        3. Permissions:
           - Windows ACLs vs Unix modes
           - Graceful degradation
           - Security by default
        
        4. Temp Directories:
           - Use tempfile module
           - Clean up on exit
           - Handle quota limits
        
        5. File Locking:
           - Very platform specific
           - Consider lock-free designs
           - Test thoroughly
        
        6. Binary vs Text:
           - Always specify mode
           - Handle line endings
           - Use 'b' for IPC data
        """
        
        print(guidelines)
    
    @staticmethod
    def platform_specific_example():
        """Example of platform-specific code"""
        
        code = '''
        import os
        import sys
        from pathlib import Path
        
        class PortableIPC:
            """Example portable IPC implementation"""
            
            def __init__(self, name):
                self.name = name
                self.platform = sys.platform
                
            def get_ipc_path(self):
                """Get platform-appropriate IPC path"""
                
                if self.platform == "win32":
                    # Windows: Use named pipe
                    return f"\\\\\\\\.\\\\pipe\\\\{self.name}"
                    
                elif self.platform == "darwin":
                    # macOS: Use /tmp but beware of cleanups
                    return f"/tmp/{self.name}.sock"
                    
                else:
                    # Linux/Unix: Prefer /run if available
                    if Path("/run").exists():
                        return f"/run/{self.name}.sock"
                    return f"/tmp/{self.name}.sock"
            
            def create_channel(self):
                """Create platform-appropriate channel"""
                
                if self.platform == "win32":
                    return self._create_windows_pipe()
                else:
                    return self._create_unix_socket()
        '''
        
        print("\n=== Platform-Specific Example ===")
        print(code)

# Reflection on cross-platform IPC
"""
After 50 years of divergent evolution, we see:

Convergence:
- POSIX standards help
- Similar problems, similar solutions
- Libraries abstract differences

Remaining Differences:
- Security models (ACLs vs modes)
- Atomicity guarantees
- Performance characteristics
- Feature availability

The filesystem as IPC medium remains viable across
platforms, but requires careful abstraction.
"""
#+end_src

** Next Steps

This concludes our exploration of filesystem-based IPC. Return to the [[file:README.org][README]] for a summary of the journey.

* Platform Comparison Summary

| Platform | Philosophy | Strengths | Weaknesses | Best For |
|----------|------------|-----------|------------|----------|
| Unix/Linux | Everything is a file | Simple, composable | Some things aren't files | Servers, embedded |
| Windows | Objects and APIs | Rich features, network aware | Complex, different from Unix | Desktop, enterprise |
| Plan 9 | Everything is a file server | Elegant, distributed | Not widely adopted | Research, inspiration |
| macOS | BSD + Apple extensions | Unix compatible + modern | Sandboxing restrictions | Desktop, development |
| Embedded | Minimize everything | Predictable, efficient | Limited features | Real-time, IoT |

* Exercises

1. **Port an IPC System**: Take a Unix filesystem IPC system and port it to Windows
2. **Abstract a Pattern**: Create a cross-platform abstraction for a specific IPC pattern
3. **Platform Comparison**: Benchmark the same IPC operation across different OSes
4. **Compatibility Layer**: Build a compatibility layer for non-portable IPC features
#+TITLE: The Filesystem as a Communication Space: Foundations
#+AUTHOR: AYGP-DR
#+DATE: 2025-06-28
#+OPTIONS: toc:2 num:t

* The Filesystem as Shared Reality

** Everything is a File... But What Is a File?

A file is not just data - it's a *name* in a shared namespace that processes can agree upon as a meeting point.

#+begin_src python :tangle core/concepts.py :mkdirp yes :comments link
"""
Core concepts for understanding the filesystem as a communication space.

A file represents:
1. A name in a shared namespace
2. A rendezvous point for processes
3. A persistent or ephemeral communication channel
4. A social contract between programs
"""

class FilesystemEntity:
    """Base abstraction for filesystem-based communication"""
    def __init__(self, path):
        self.path = path
        
    @property
    def is_communication_primitive(self):
        """Can this be used for IPC?"""
        # TODO: Implement logic to determine if entity can be used for IPC
        raise NotImplementedError
        
    def establish_rendezvous(self, other_process):
        """Establish a communication channel with another process"""
        # TODO: Implement rendezvous protocol
        pass
#+end_src

** The Namespace as Social Contract

The filesystem namespace provides a shared reality where processes can agree on names and locations for communication.

#+begin_src mermaid :file diagrams/namespace-social-contract.png :tangle diagrams/namespace-social-contract.mmd :mkdirp yes :comments link
graph TD
    NS[Filesystem Namespace]
    P1[Process 1]
    P2[Process 2]
    P3[Process 3]
    
    NS -->|provides names| P1
    NS -->|provides names| P2
    NS -->|provides names| P3
    
    P1 -.->|agrees on /tmp/socket| P2
    P2 -.->|agrees on /var/run/lock| P3
    P1 -.->|agrees on /dev/shm/buffer| P3
#+end_src

** Philosophical Underpinnings

*** The Ontology of Files
TODO: Explore what it means for a file to "exist" in the context of communication
- [ ] Define existence in terms of namespace visibility
- [ ] Discuss ephemeral vs persistent existence
- [ ] Analyze the role of permissions in defining existence

*** Names as Addresses
TODO: Develop the analogy between filesystem paths and network addresses
- [ ] Path resolution as routing
- [ ] Hierarchical namespaces as hierarchical routing
- [ ] The role of symlinks in address translation

** Key Principles

1. **Namespace Agreement**: Processes must agree on names to communicate
2. **Atomicity Guarantees**: Certain filesystem operations provide synchronization
3. **Persistence Options**: Choose between ephemeral and persistent channels
4. **Permission Models**: Access control as communication control

** The POSIX Contract

#+begin_src c :tangle core/posix_guarantees.h :mkdirp yes :comments link
/*
 * POSIX guarantees that form the foundation of filesystem IPC
 */

// Atomic operations guaranteed by POSIX
#define ATOMIC_RENAME    1  // rename() is atomic within same filesystem
#define ATOMIC_LINK      1  // link() creation is atomic
#define ATOMIC_UNLINK    1  // unlink() is atomic
#define ATOMIC_MKDIR     1  // mkdir() is atomic

// TODO: Document other POSIX guarantees relevant to IPC
// - [ ] O_EXCL behavior
// - [ ] Signal delivery during blocking I/O
// - [ ] Mandatory vs advisory locking
#+end_src

** Historical Context

*** From Unix Philosophy to Modern IPC
TODO: Trace the evolution of "everything is a file"
- [ ] Original Unix pipe implementation
- [ ] Introduction of named pipes (FIFOs)
- [ ] Berkeley sockets as files
- [ ] Plan 9's extension of the philosophy

*** Lessons from Other Systems
TODO: Compare with non-Unix approaches
- [ ] Windows named pipes and mailslots
- [ ] VMS mailboxes
- [ ] QNX message passing

** Next Steps

Continue to [[file:01-namespace-as-rendezvous.org][Chapter 1: The Namespace as Rendezvous]] to explore how the filesystem namespace serves as a meeting point for process communication.

* References and Further Reading

TODO: Compile comprehensive bibliography
- [ ] Original Unix papers
- [ ] POSIX specifications
- [ ] Academic papers on filesystem semantics
- [ ] Security research on filesystem races

* Appendix: Setting Up the Environment

#+begin_src bash :tangle scripts/setup_environment.sh :shebang #!/bin/bash :mkdirp yes :comments link
# Setup script for exploring filesystem communication

# Create standard directories for experiments
mkdir -p /tmp/fsc-experiments/{pipes,sockets,locks,messages}

# Set up permissions for shared communication
chmod 1777 /tmp/fsc-experiments

# TODO: Add more setup steps
# - [ ] Check for required tools
# - [ ] Create test users for permission experiments
# - [ ] Set up monitoring tools

echo "Filesystem communication space initialized at /tmp/fsc-experiments"
#+end_src